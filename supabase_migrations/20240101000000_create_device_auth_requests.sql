-- Phase 1: Database Schema Adjustment

-- 1. Create device_authorization_requests Table
CREATE TABLE public.device_authorization_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  fingerprint TEXT NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'denied')),
  requested_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  reviewed_by UUID NULL REFERENCES auth.users(id) ON DELETE SET NULL,
  reviewed_at TIMESTAMPTZ NULL,
  user_description TEXT NULL,
  admin_notes TEXT NULL
);

-- Add comments to columns for better understanding
COMMENT ON COLUMN public.device_authorization_requests.id IS 'Primary key for the request';
COMMENT ON COLUMN public.device_authorization_requests.user_id IS 'The user requesting device authorization';
COMMENT ON COLUMN public.device_authorization_requests.fingerprint IS 'The device fingerprint submitted by the user';
COMMENT ON COLUMN public.device_authorization_requests.status IS 'Status of the request: pending, approved, denied';
COMMENT ON COLUMN public.device_authorization_requests.requested_at IS 'Timestamp when the request was made';
COMMENT ON COLUMN public.device_authorization_requests.reviewed_by IS 'The admin user who reviewed this request';
COMMENT ON COLUMN public.device_authorization_requests.reviewed_at IS 'Timestamp when the request was reviewed';
COMMENT ON COLUMN public.device_authorization_requests.user_description IS 'Optional description provided by the user for the device (e.g., "My work laptop")';
COMMENT ON COLUMN public.device_authorization_requests.admin_notes IS 'Optional notes added by the admin during review';

-- 2. Add Index for querying pending requests
CREATE INDEX idx_pending_device_requests ON public.device_authorization_requests (status) WHERE status = 'pending';
CREATE INDEX idx_device_auth_requests_user_id ON public.device_authorization_requests (user_id);

-- 3. Enable RLS
ALTER TABLE public.device_authorization_requests ENABLE ROW LEVEL SECURITY;

-- 4. RLS Policies for device_authorization_requests

-- Users can see their own requests
CREATE POLICY "Allow user to see their own requests"
  ON public.device_authorization_requests FOR SELECT
  USING (auth.uid() = user_id);

-- Admins can see all requests
-- This assumes you have a 'profiles' table with a 'role' column, and 'admin'/'superadmin' are roles.
-- Adjust the role check according to your application's role management.
CREATE POLICY "Allow admins to view all requests"
  ON public.device_authorization_requests FOR SELECT
  USING (
    EXISTS (
      SELECT 1
      FROM public.profiles
      WHERE profiles.id = auth.uid() AND profiles.role IN ('admin', 'superadmin')
    )
  );

-- No direct insert policy for users; requests are created by the 'validate-device' function.
-- If you need users to be able to create requests directly (e.g. from a "request access" button),
-- you would add a specific INSERT policy here.

-- Admins can update requests (to approve/deny and add notes)
CREATE POLICY "Allow admins to update requests"
  ON public.device_authorization_requests FOR UPDATE
  USING (
    EXISTS (
      SELECT 1
      FROM public.profiles
      WHERE profiles.id = auth.uid() AND profiles.role IN ('admin', 'superadmin')
    )
  )
  WITH CHECK ( -- Ensure the user is still an admin/superadmin when the update happens
    EXISTS (
      SELECT 1
      FROM public.profiles
      WHERE profiles.id = auth.uid() AND profiles.role IN ('admin', 'superadmin')
    )
  );

-- Optional: Allow users to update the user_description for their PENDING requests
CREATE POLICY "Allow user to update description on their pending requests"
  ON public.device_authorization_requests FOR UPDATE
  USING (auth.uid() = user_id AND status = 'pending')
  WITH CHECK (auth.uid() = user_id AND status = 'pending');

-- Admins can delete requests (optional, consider if this is needed or if status should be 'archived')
CREATE POLICY "Allow admins to delete requests"
  ON public.device_authorization_requests FOR DELETE
  USING (
    EXISTS (
      SELECT 1
      FROM public.profiles
      WHERE profiles.id = auth.uid() AND profiles.role IN ('admin', 'superadmin')
    )
  ); 